{"version":3,"file":"index.js","sources":["../src/useIsScrolledIntoView.js"],"sourcesContent":["'use strict';\nimport {useState, useCallback, useEffect} from 'react';\nconst isInViewport = (el, {top: t, height: h} = el.getBoundingClientRect()) =>\n  t <= window.innerHeight && t + h >= 0;\nconst useIsScrolledIntoView = ref => {\n  const [isIntoView, setIsIntoView] = useState(false);\n  const handleOnScroll = useCallback(() => {\n    setIsIntoView(isInViewport(ref.current));\n  }, []);\n  useEffect(() => {\n    window.addEventListener('scroll', handleOnScroll);\n    return () => {\n      window.removeEventListener('scroll', handleOnScroll);\n    };\n  }, [ref]);\n  return isIntoView;\n};\nexport default useIsScrolledIntoView;\n"],"names":["useState","useCallback","useEffect"],"mappings":";;;;;;AAEA,MAAM,YAAY,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,qBAAqB,EAAE;EACxE,CAAC,IAAI,MAAM,CAAC,WAAW,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACxC,MAAM,qBAAqB,GAAG,GAAG,IAAI;EACnC,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAGA,cAAQ,CAAC,KAAK,CAAC,CAAC;EACpD,MAAM,cAAc,GAAGC,iBAAW,CAAC,MAAM;IACvC,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;GAC1C,EAAE,EAAE,CAAC,CAAC;EACPC,eAAS,CAAC,MAAM;IACd,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;IAClD,OAAO,MAAM;MACX,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;KACtD,CAAC;GACH,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;EACV,OAAO,UAAU,CAAC;CACnB,CAAC;;;;"}